// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: apriltagrpc.capnp

#include "apriltagrpc.capnp.hpp"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_e6c075340df7ba28 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     40, 186, 247,  13,  52, 117, 192, 230,
     18,   0,   0,   0,   3,   0,   0,   0,
      3,  44,  86, 168, 130, 225,  60, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 112, 114, 105, 108, 116,  97, 103,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  65, 112, 114, 105, 108,  84,
     97, 103,  82, 112,  99,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    150, 228, 222, 215, 232, 106,  50, 154,
      1,   0,   0,   0,  42,   0,   0,   0,
     80, 111, 115, 101,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    251, 184, 102,  33,  76, 111,  11, 215,
     84, 183, 129,  55, 175, 108,  54, 162,
     17,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  84, 114,  97,  99, 107,
    101, 114,  80, 111, 115, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e6c075340df7ba28 = b_e6c075340df7ba28.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e6c075340df7ba28[] = {
  &s_a2366caf3781b754,
  &s_d70b6f4c2166b8fb,
};
static const uint16_t m_e6c075340df7ba28[] = {0};
const ::capnp::_::RawSchema s_e6c075340df7ba28 = {
  0xe6c075340df7ba28, b_e6c075340df7ba28.words, 33, d_e6c075340df7ba28, m_e6c075340df7ba28,
  2, 1, nullptr, nullptr, nullptr, { &s_e6c075340df7ba28, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<124> b_9a326ae8d7dee496 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150, 228, 222, 215, 232, 106,  50, 154,
     30,   0,   0,   0,   1,   0,   7,   0,
     40, 186, 247,  13,  52, 117, 192, 230,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 112, 114, 105, 108, 116,  97, 103,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  65, 112, 114, 105, 108,  84,
     97, 103,  82, 112,  99,  46,  80, 111,
    115, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
    208,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 119,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 120,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 121,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113, 122,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a326ae8d7dee496 = b_9a326ae8d7dee496.words;
#if !CAPNP_LITE
static const uint16_t m_9a326ae8d7dee496[] = {3, 4, 5, 6, 0, 1, 2};
static const uint16_t i_9a326ae8d7dee496[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_9a326ae8d7dee496 = {
  0x9a326ae8d7dee496, b_9a326ae8d7dee496.words, 124, nullptr, m_9a326ae8d7dee496,
  0, 7, i_9a326ae8d7dee496, nullptr, nullptr, { &s_9a326ae8d7dee496, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_d70b6f4c2166b8fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 184, 102,  33,  76, 111,  11, 215,
     30,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 112, 114, 105, 108, 116,  97, 103,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  65, 112, 114, 105, 108,  84,
     97, 103,  82, 112,  99,  46, 103, 101,
    116,  84, 114,  97,  99, 107, 101, 114,
     80, 111, 115, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 100, 101, 120,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,  79, 102, 102, 115,
    101, 116,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d70b6f4c2166b8fb = b_d70b6f4c2166b8fb.words;
#if !CAPNP_LITE
static const uint16_t m_d70b6f4c2166b8fb[] = {0, 1};
static const uint16_t i_d70b6f4c2166b8fb[] = {0, 1};
const ::capnp::_::RawSchema s_d70b6f4c2166b8fb = {
  0xd70b6f4c2166b8fb, b_d70b6f4c2166b8fb.words, 51, nullptr, m_d70b6f4c2166b8fb,
  0, 2, i_d70b6f4c2166b8fb, nullptr, nullptr, { &s_d70b6f4c2166b8fb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a2366caf3781b754 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 183, 129,  55, 175, 108,  54, 162,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 112, 114, 105, 108, 116,  97, 103,
    114, 112,  99,  46,  99,  97, 112, 110,
    112,  58,  65, 112, 114, 105, 108,  84,
     97, 103,  82, 112,  99,  46, 103, 101,
    116,  84, 114,  97,  99, 107, 101, 114,
     80, 111, 115, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 111, 115, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    150, 228, 222, 215, 232, 106,  50, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2366caf3781b754 = b_a2366caf3781b754.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a2366caf3781b754[] = {
  &s_9a326ae8d7dee496,
};
static const uint16_t m_a2366caf3781b754[] = {0};
static const uint16_t i_a2366caf3781b754[] = {0};
const ::capnp::_::RawSchema s_a2366caf3781b754 = {
  0xa2366caf3781b754, b_a2366caf3781b754.words, 35, d_a2366caf3781b754, m_a2366caf3781b754,
  1, 1, i_a2366caf3781b754, nullptr, nullptr, { &s_a2366caf3781b754, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::AprilTagRpc::GetTrackerPoseParams,  ::AprilTagRpc::GetTrackerPoseResults>
AprilTagRpc::Client::getTrackerPoseRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::AprilTagRpc::GetTrackerPoseParams,  ::AprilTagRpc::GetTrackerPoseResults>(
      0xe6c075340df7ba28ull, 0, sizeHint, {true});
}
::kj::Promise<void> AprilTagRpc::Server::getTrackerPose(GetTrackerPoseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "apriltagrpc.capnp:AprilTagRpc", "getTrackerPose",
      0xe6c075340df7ba28ull, 0);
}
::capnp::Capability::Server::DispatchCallResult AprilTagRpc::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe6c075340df7ba28ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("apriltagrpc.capnp:AprilTagRpc", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult AprilTagRpc::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        getTrackerPose(::capnp::Capability::Server::internalGetTypedContext<
             ::AprilTagRpc::GetTrackerPoseParams,  ::AprilTagRpc::GetTrackerPoseResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "apriltagrpc.capnp:AprilTagRpc",
          0xe6c075340df7ba28ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AprilTagRpc
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AprilTagRpc::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AprilTagRpc::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// AprilTagRpc::Pose
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t AprilTagRpc::Pose::_capnpPrivate::dataWordSize;
constexpr uint16_t AprilTagRpc::Pose::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AprilTagRpc::Pose::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AprilTagRpc::Pose::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// AprilTagRpc::GetTrackerPoseParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t AprilTagRpc::GetTrackerPoseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AprilTagRpc::GetTrackerPoseParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AprilTagRpc::GetTrackerPoseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AprilTagRpc::GetTrackerPoseParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// AprilTagRpc::GetTrackerPoseResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t AprilTagRpc::GetTrackerPoseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AprilTagRpc::GetTrackerPoseResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind AprilTagRpc::GetTrackerPoseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AprilTagRpc::GetTrackerPoseResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



